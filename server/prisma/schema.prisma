generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Owner
  Admin
  Photographer
  Editor
  Finance
}

enum StaffStatus {
  Active
  Invited
  Inactive
}

enum BookingStatus {
  Pending
  Confirmed
  Completed
  Cancelled
}

enum InvoiceStatus {
  Paid
  Overdue
  Sent
}

enum JobPriority {
  Low
  Normal
  High
  Urgent
}

model Client {
  id             String        @id
  name           String
  email          String        @unique
  phone          String?
  avatarUrl      String?
  joinDate       DateTime
  totalBookings  Int           @default(0)
  totalSpent     Decimal       @default(0) @db.Decimal(12, 2)
  notes          String?
  financialStatus String?
  bookings       Booking[]
  invoices       Invoice[]
  editingJobs    EditingJob[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Staff {
  id                   String      @id
  name                 String
  email                String      @unique
  avatarUrl            String?
  role                 UserRole
  status               StaffStatus
  lastLogin            DateTime?
  photographerBookings Booking[]   @relation("PhotographerBookings")
  editingJobs          EditingJob[] @relation("EditorAssignments")
  recordedPayments     Payment[]   @relation("PaymentRecorder")
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
}

model SessionCategory {
  id        String           @id
  name      String
  packages  SessionPackage[]
  bookings  Booking[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model SessionPackage {
  id           String          @id
  categoryId   String
  category     SessionCategory @relation(fields: [categoryId], references: [id])
  name         String
  price        Decimal         @db.Decimal(10, 2)
  inclusions   String[]
  bookings     Booking[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Booking {
  id                 String          @id
  clientId           String
  client             Client          @relation(fields: [clientId], references: [id])
  clientName         String
  clientAvatarUrl    String?
  sessionCategoryId  String
  sessionCategory    SessionCategory @relation(fields: [sessionCategoryId], references: [id])
  sessionPackageId   String
  sessionPackage     SessionPackage  @relation(fields: [sessionPackageId], references: [id])
  sessionType        String
  photographerId     String?
  photographer       Staff?          @relation("PhotographerBookings", fields: [photographerId], references: [id])
  photographerName   String?
  date               DateTime
  status             BookingStatus
  notes              String?
  location           String?
  photoSelections    Json?
  editingJobs        EditingJob[]
  expenses           Expense[]
  invoice            Invoice?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model Invoice {
  id               String         @id
  bookingId        String?        @unique
  booking          Booking?       @relation(fields: [bookingId], references: [id])
  clientId         String
  client           Client         @relation(fields: [clientId], references: [id])
  clientName       String
  clientAvatarUrl  String?
  amount           Decimal        @db.Decimal(12, 2)
  amountPaid       Decimal        @default(0) @db.Decimal(12, 2)
  issueDate        DateTime?
  dueDate          DateTime
  status           InvoiceStatus
  lastReminderSent DateTime?
  items            InvoiceItem[]
  payments         Payment[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model InvoiceItem {
  id          String   @id
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  description String
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)
}

model PaymentAccount {
  id       String    @id
  name     String
  type     String
  details  String?
  payments Payment[]
  expenses Expense[]
  createdAt DateTime @default(now())
}

model Payment {
  id              String    @id
  invoiceId       String
  invoice         Invoice   @relation(fields: [invoiceId], references: [id])
  date            DateTime
  amount          Decimal   @db.Decimal(12, 2)
  accountId       String
  account         PaymentAccount @relation(fields: [accountId], references: [id])
  methodNotes     String?
  recordedById    String?
  recordedBy      Staff?    @relation("PaymentRecorder", fields: [recordedById], references: [id])
  recordedByName  String?
  createdAt       DateTime  @default(now())
}

model EditingStatus {
  id        String       @id
  name      String
  color     String
  jobs      EditingJob[]
}

model EditingJob {
  id                String        @id
  bookingId         String
  booking           Booking       @relation(fields: [bookingId], references: [id])
  clientId          String
  client            Client        @relation(fields: [clientId], references: [id])
  clientName        String
  editorId          String?
  editor            Staff?        @relation("EditorAssignments", fields: [editorId], references: [id])
  editorName        String?
  editorAvatarUrl   String?
  statusId          String
  status            EditingStatus @relation(fields: [statusId], references: [id])
  uploadDate        DateTime
  driveFolderUrl    String?
  photographerNotes String?
  priority          JobPriority   @default(Normal)
  revisionCount     Int           @default(0)
  revisionNotes     Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Expense {
  id          String         @id
  category    String
  description String
  amount      Decimal        @db.Decimal(12, 2)
  date        DateTime
  accountId   String
  account     PaymentAccount @relation(fields: [accountId], references: [id])
  bookingId   String?
  booking     Booking?       @relation(fields: [bookingId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}
